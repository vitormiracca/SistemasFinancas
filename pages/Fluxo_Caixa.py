# carregando as bibliotecas
import streamlit as st

from model.conta import Conta
from model.tipo_lancamento.categoria import Categoria
from model.tipo_lancamento.despesa import Despesa
from model.tipo_lancamento.receita import Receita
from model.tipo_lancamento.tipo_lancamento import TipoLancamento

# Fun√ß√£o para obter as categorias com base no tipo de lan√ßamento selecionado
def obter_categorias(tipo_lancamento):
    return Categoria.listar_categorias(TipoLancamento.string_para_tipo_lancamento(tipo_lancamento))

#region Preparando ambiente para teste

# Adiciona categorias
categoria_receita = ['Sal√°rio', 'Benef√≠cios', 'Outros', 'Devedores', 'Rendimentos']
categoria_despesa = ['Supermercado', 'Alimenta√ß√£o', 'Shopping', 'Estudo', 'Assinaturas Digitais', 'Tabacaria', 'Outros', 'Despesas Carro']
for i in categoria_receita:
    Categoria(TipoLancamento.RECEITA, i)
for i in categoria_despesa:
    Categoria(TipoLancamento.DESPESA, i)
Categoria(TipoLancamento.TRANSFERENCIA, "Transfer√™ncia")

nu_conta = Conta("Nubank", "Conta Corrente")
nu_credito = Conta("Nubank Cr√©dito", "Cr√©dito")
bradesco_credito = Conta("Bradesco Cart√µes", "Cr√©dito")
ticket_vale = Conta("Ticket", "Vale Refei√ß√£o")

Receita('2024-02-01', 1959.10, "Sal√°rio", nu_conta, "Sal√°rio dia 01")
Receita('2024-02-01', 750, "Benef√≠cios", ticket_vale, "VR dia 01")
Despesa('2024-02-01', 55.5, "Alimenta√ß√£o", ticket_vale, "Mc Donalds")
Despesa('2024-02-01', 198.90, "Estudo", bradesco_credito, "Workshop Databricks")
Despesa('2024-02-01', 49, "Tabacaria", nu_conta, "")
Despesa('2024-02-01', 250, "Despesas Carro", bradesco_credito, "Gasolina")
Despesa('2024-02-01', 750, "Supermercado", ticket_vale, "NT")
Receita('2024-02-15', 1580, "Sal√°rio", nu_conta, "Sal√°rio dia 15")

#endregion

st.set_page_config(page_title="Fluxo_Caixa", page_icon="üìà")

st.title('Inserir Lan√ßamento')

st.sidebar.success("Registre seus Lan√ßamentos.")

# Inicializar a sess√£o do Streamlit
session_state = st.session_state

# Fun√ß√£o para obter as categorias com base no tipo de lan√ßamento selecionado
def obter_categorias(tipo_lancamento):
    return Categoria.listar_categorias(TipoLancamento.string_para_tipo_lancamento(tipo_lancamento))

# Inicializar a session_state para armazenar o tipo de lan√ßamento selecionado
if 'tipo_lancamento' not in st.session_state:
    st.session_state.tipo_lancamento = "Receita"

contas = Conta.listar_contas()

with st.form(key='insert'):
    # Caixa de sele√ß√£o para o tipo de lan√ßamento
    input_tipo_lancamento = st.radio("Tipo de Lan√ßamento", ["Receita", "Despesa", "Transfer√™ncia"], horizontal=True)

    # Atualizar o tipo de lan√ßamento armazenado na session_state
    st.session_state.tipo_lancamento = input_tipo_lancamento

    # Obter as categorias com base no tipo de lan√ßamento selecionado
    categorias = obter_categorias(st.session_state.tipo_lancamento)
    

    # Dividir a tela em duas colunas
    col1, col2 = st.columns([1, 1])
    with col1:
        input_data_lancamento = st.date_input(label='Data do Lan√ßamento', format="DD/MM/YYYY")
        input_conta = st.selectbox(label='Conta Usada',
                                    options=contas)
    with col2:
        input_valor_lancamento = st.number_input(label='Valor do Lan√ßamento', step=0.01)
        st.date_input(label="Data do D√©bito", format="DD/MM/YYYY", disabled=True, value=input_data_lancamento)

    input_categoria_lancamento = st.selectbox(label="Categoria Lan√ßamento", options=categorias)
    input_descricao = st.text_input(label='Insira a descri√ß√£o do Lan√ßamento')
    button_submit = st.form_submit_button('Enviar')